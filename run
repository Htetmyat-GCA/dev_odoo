#!/usr/bin/python3

import argparse
import subprocess
import sys
import argcomplete
import re
import os
from settings import *

def available_versions():
    try:
        versions = [int(v.replace(ODOO_VERSION_PREFIX, '').replace(ODOO_VERSION_POSTFIX, ''))
                    for v in os.listdir(ODOO_ROOT_DIR)
                    if v.startswith(ODOO_VERSION_PREFIX)]
        return sorted(versions)
    except FileNotFoundError:
        print(f"No such file or directory: {ODOO_ROOT_DIR}")
        sys.exit(1)

def check_envpath():
    ...

def find_conf_file(path, version):
    regex = re.compile(rf'^(.+){version}\.conf$')
    for root, _, files in os.walk(path):
        for file in files:
            if regex.match(file):
                return [os.path.join(root, file)]
    raise ValueError(f'Odoo {version} conf file was not found in {path}')

# Check the directory is present and can be accessed by current user.
def is_root(path):
    return os.path.isdir(path) and os.access(path, os.R_OK)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', type=int, choices=available_versions(), default=17, help='Odoo Version (default == 17)')
    parser.add_argument('-p', type=str, choices=[i for i in os.listdir(PROJECT_ROOT) if '.' not in i], required=True, help='Project Directories')
    parser.add_argument('-u', type=str, help='To Upgrade Module', metavar='MODULE')
    parser.add_argument('-d', type=str, help='Select the Database', metavar='DATABASE')
    parser.add_argument('-s', action='store_true', help='Odoo Shell')
    argcomplete.autocomplete(parser)
    args = parser.parse_args()

    if not all(map(is_root, [ODOO_ROOT_DIR, PROJECT_ROOT, VIRTUAL])):
        for root, name in zip([ODOO_ROOT_DIR, PROJECT_ROOT, VIRTUAL], ['ODOO_ROOT_DIR', 'PROJECT_ROOT', 'VIRTUAL']):
            if not is_root(root):
                print(f'"{root}" directory was not found or cannot be accessed. Please re-configure {name} in settings.py!')
        sys.exit(1)

    version, name = args.v, args.p
    venv = os.path.join(VIRTUAL, f'{ENV_PREFIX or ""}{version}{ENV_POSTFIX or ""}/bin/activate')
    odoo_bin = os.path.join(ODOO_ROOT_DIR, f'{ODOO_VERSION_PREFIX}{version}{ODOO_VERSION_POSTFIX or ""}/odoo-bin {"shell" if args.s else ""}')
    config_file = find_conf_file(os.path.join(PROJECT_ROOT, name), version)[0]

    cmd = f"source {venv} && {odoo_bin} -c {config_file}"
    if args.u:
        cmd += f" -u {args.u}"
    if args.d:
        cmd += f" -d {args.d}"
    if args.s and not args.d:
        raise ValueError("Database must be selected")

    try:
        subprocess.run(cmd, shell=True, check=True, executable=SHELL)
    except subprocess.CalledProcessError as e:
        print(f"Command failed: with exit status {e.returncode}: {e.cmd}")
        sys.exit(e.returncode)
    except KeyboardInterrupt:
        print("Keyboard interrupt received, exiting...")
        sys.exit(0)

if __name__ == '__main__':
    main()